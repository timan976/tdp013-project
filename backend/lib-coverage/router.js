/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['router.js']) {
  _$jscoverage['router.js'] = [];
  _$jscoverage['router.js'][3] = 0;
  _$jscoverage['router.js'][4] = 0;
  _$jscoverage['router.js'][5] = 0;
  _$jscoverage['router.js'][6] = 0;
  _$jscoverage['router.js'][7] = 0;
  _$jscoverage['router.js'][8] = 0;
  _$jscoverage['router.js'][10] = 0;
  _$jscoverage['router.js'][11] = 0;
  _$jscoverage['router.js'][13] = 0;
  _$jscoverage['router.js'][14] = 0;
  _$jscoverage['router.js'][15] = 0;
  _$jscoverage['router.js'][16] = 0;
  _$jscoverage['router.js'][18] = 0;
  _$jscoverage['router.js'][19] = 0;
  _$jscoverage['router.js'][25] = 0;
  _$jscoverage['router.js'][26] = 0;
  _$jscoverage['router.js'][33] = 0;
  _$jscoverage['router.js'][36] = 0;
  _$jscoverage['router.js'][37] = 0;
  _$jscoverage['router.js'][39] = 0;
  _$jscoverage['router.js'][41] = 0;
  _$jscoverage['router.js'][42] = 0;
  _$jscoverage['router.js'][43] = 0;
  _$jscoverage['router.js'][44] = 0;
  _$jscoverage['router.js'][45] = 0;
  _$jscoverage['router.js'][46] = 0;
  _$jscoverage['router.js'][49] = 0;
  _$jscoverage['router.js'][50] = 0;
  _$jscoverage['router.js'][51] = 0;
  _$jscoverage['router.js'][52] = 0;
  _$jscoverage['router.js'][54] = 0;
  _$jscoverage['router.js'][55] = 0;
  _$jscoverage['router.js'][58] = 0;
  _$jscoverage['router.js'][59] = 0;
  _$jscoverage['router.js'][60] = 0;
  _$jscoverage['router.js'][63] = 0;
  _$jscoverage['router.js'][64] = 0;
  _$jscoverage['router.js'][65] = 0;
  _$jscoverage['router.js'][66] = 0;
  _$jscoverage['router.js'][69] = 0;
  _$jscoverage['router.js'][70] = 0;
  _$jscoverage['router.js'][72] = 0;
  _$jscoverage['router.js'][75] = 0;
}
_$jscoverage['router.js'].source = ["","<span class=\"c\">// Returns a handler that matches the given path</span>","<span class=\"k\">function</span> match<span class=\"k\">(</span>handlers<span class=\"k\">,</span> request_path<span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> route_path <span class=\"k\">in</span> handlers<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span><span class=\"k\">(</span>route_path<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'*'</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">var</span> regex_string <span class=\"k\">=</span> route_path<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">\"**\"</span><span class=\"k\">,</span> <span class=\"s\">\"(([0-9a-zA-Z._-]+/?)+)\"</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/\\*/g</span><span class=\"k\">,</span> <span class=\"s\">\"([0-9a-zA-Z._-]+)\"</span><span class=\"k\">);</span>","\t\t\t<span class=\"k\">var</span> regex <span class=\"k\">=</span> <span class=\"k\">new</span> RegExp<span class=\"k\">(</span>regex_string<span class=\"k\">,</span> <span class=\"s\">\"i\"</span><span class=\"k\">);</span>","\t\t\t<span class=\"k\">var</span> matches <span class=\"k\">=</span> request_path<span class=\"k\">.</span>match<span class=\"k\">(</span>regex<span class=\"k\">);</span>","","\t\t\t<span class=\"k\">if</span><span class=\"k\">(!</span>matches<span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">continue</span><span class=\"k\">;</span>","","\t\t\t<span class=\"k\">if</span><span class=\"k\">(</span>matches<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">==</span> request_path<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">var</span> params <span class=\"k\">=</span> <span class=\"k\">[];</span>","\t\t\t\t<span class=\"k\">if</span><span class=\"k\">(</span>matches<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">2</span><span class=\"k\">)</span>","\t\t\t\t\tparams <span class=\"k\">=</span> matches<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> matches<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">else</span>","\t\t\t\t\tparams <span class=\"k\">=</span> <span class=\"k\">[</span>matches<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]];</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">{</span>","\t\t\t\t\thandler<span class=\"k\">:</span> handlers<span class=\"k\">[</span>route_path<span class=\"k\">],</span>","\t\t\t\t\tparams<span class=\"k\">:</span> params","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span><span class=\"k\">(</span>route_path <span class=\"k\">==</span> request_path<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"k\">{</span>","\t\t\t\t\thandler<span class=\"k\">:</span> handlers<span class=\"k\">[</span>route_path<span class=\"k\">],</span>","\t\t\t\t\tparams<span class=\"k\">:</span> <span class=\"k\">[]</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> route<span class=\"k\">(</span>handlers<span class=\"k\">,</span> pathname<span class=\"k\">,</span> request<span class=\"k\">,</span> response<span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">if</span><span class=\"k\">(</span>pathname<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">10</span><span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">\"/socket.io\"</span><span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","","\t<span class=\"k\">var</span> m <span class=\"k\">=</span> match<span class=\"k\">(</span>handlers<span class=\"k\">,</span> pathname<span class=\"k\">);</span>","","\t<span class=\"k\">if</span><span class=\"k\">(!</span>m<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconsole<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">\"No request handler found for \"</span> <span class=\"k\">+</span> pathname<span class=\"k\">);</span>","\t\tresponse<span class=\"k\">.</span>writeHead<span class=\"k\">(</span><span class=\"s\">404</span><span class=\"k\">,</span> <span class=\"k\">{</span><span class=\"s\">'Content-Type'</span><span class=\"k\">:</span> <span class=\"s\">'text/html'</span><span class=\"k\">}</span><span class=\"k\">);</span>","\t\tresponse<span class=\"k\">.</span>write<span class=\"k\">(</span><span class=\"s\">\"404 Not Found\"</span><span class=\"k\">);</span>","\t\tresponse<span class=\"k\">.</span>end<span class=\"k\">();</span>","\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">var</span> handler <span class=\"k\">=</span> m<span class=\"k\">.</span>handler<span class=\"k\">;</span>","\t<span class=\"k\">var</span> method <span class=\"k\">=</span> request<span class=\"k\">.</span>method<span class=\"k\">;</span>","\t<span class=\"k\">var</span> args <span class=\"k\">=</span> <span class=\"k\">[</span>request<span class=\"k\">,</span> response<span class=\"k\">];</span>","\targs<span class=\"k\">.</span>push<span class=\"k\">.</span>apply<span class=\"k\">(</span>args<span class=\"k\">,</span> m<span class=\"k\">.</span>params<span class=\"k\">);</span>","","\t<span class=\"k\">var</span> date <span class=\"k\">=</span> <span class=\"k\">new</span> Date<span class=\"k\">();</span>","\tconsole<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"s\">\"[\"</span> <span class=\"k\">+</span> date<span class=\"k\">.</span>toString<span class=\"k\">()</span> <span class=\"k\">+</span> <span class=\"s\">\"] \"</span> <span class=\"k\">+</span> request<span class=\"k\">.</span>method <span class=\"k\">+</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> pathname<span class=\"k\">);</span>","","\t<span class=\"c\">// Enable CORS</span>","\t<span class=\"k\">if</span><span class=\"k\">(</span>handler<span class=\"k\">[</span><span class=\"s\">\"cors_enabled\"</span><span class=\"k\">]</span> <span class=\"k\">==</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tresponse<span class=\"k\">.</span>setHeader<span class=\"k\">(</span><span class=\"s\">\"Access-Control-Allow-Origin\"</span><span class=\"k\">,</span> <span class=\"s\">\"*\"</span><span class=\"k\">);</span>","\t\tresponse<span class=\"k\">.</span>setHeader<span class=\"k\">(</span><span class=\"s\">\"Access-Control-Allow-Methods\"</span><span class=\"k\">,</span> <span class=\"s\">\"POST, GET, OPTIONS\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">if</span><span class=\"k\">(</span>request<span class=\"k\">.</span>method <span class=\"k\">!=</span> <span class=\"s\">\"OPTIONS\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> handler<span class=\"k\">[</span>method<span class=\"k\">]</span> <span class=\"k\">!=</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tresponse<span class=\"k\">.</span>writeHead<span class=\"k\">(</span><span class=\"s\">405</span><span class=\"k\">);</span>","\t\tresponse<span class=\"k\">.</span>end<span class=\"k\">();</span>","\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">if</span><span class=\"k\">(</span>request<span class=\"k\">.</span>method <span class=\"k\">==</span> <span class=\"s\">\"OPTIONS\"</span><span class=\"k\">)</span>","\t\trequest<span class=\"k\">.</span>end<span class=\"k\">();</span>","\t<span class=\"k\">else</span>","\t\thandler<span class=\"k\">[</span>method<span class=\"k\">].</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> args<span class=\"k\">);</span>","<span class=\"k\">}</span>","","exports<span class=\"k\">.</span>route <span class=\"k\">=</span> route<span class=\"k\">;</span>"];
_$jscoverage['router.js'][3]++;
function match(handlers, request_path) {
  _$jscoverage['router.js'][4]++;
  for (var route_path in handlers) {
    _$jscoverage['router.js'][5]++;
    if ((route_path.indexOf("*") != -1)) {
      _$jscoverage['router.js'][6]++;
      var regex_string = route_path.replace("**", "(([0-9a-zA-Z._-]+/?)+)").replace(/\*/g, "([0-9a-zA-Z._-]+)");
      _$jscoverage['router.js'][7]++;
      var regex = new RegExp(regex_string, "i");
      _$jscoverage['router.js'][8]++;
      var matches = request_path.match(regex);
      _$jscoverage['router.js'][10]++;
      if ((! matches)) {
        _$jscoverage['router.js'][11]++;
        continue;
      }
      _$jscoverage['router.js'][13]++;
      if ((matches[0] == request_path)) {
        _$jscoverage['router.js'][14]++;
        var params = [];
        _$jscoverage['router.js'][15]++;
        if ((matches.length > 2)) {
          _$jscoverage['router.js'][16]++;
          params = matches.slice(1, (matches.length - 1));
        }
        else {
          _$jscoverage['router.js'][18]++;
          params = [matches[1]];
        }
        _$jscoverage['router.js'][19]++;
        return ({handler: handlers[route_path], params: params});
      }
    }
    else {
      _$jscoverage['router.js'][25]++;
      if ((route_path == request_path)) {
        _$jscoverage['router.js'][26]++;
        return ({handler: handlers[route_path], params: []});
      }
    }
}
  _$jscoverage['router.js'][33]++;
  return false;
}
_$jscoverage['router.js'][36]++;
function route(handlers, pathname, request, response) {
  _$jscoverage['router.js'][37]++;
  if ((pathname.substring(0, 10) == "/socket.io")) {
    _$jscoverage['router.js'][37]++;
    return;
  }
  _$jscoverage['router.js'][39]++;
  var m = match(handlers, pathname);
  _$jscoverage['router.js'][41]++;
  if ((! m)) {
    _$jscoverage['router.js'][42]++;
    console.log(("No request handler found for " + pathname));
    _$jscoverage['router.js'][43]++;
    response.writeHead(404, {"Content-Type": "text/html"});
    _$jscoverage['router.js'][44]++;
    response.write("404 Not Found");
    _$jscoverage['router.js'][45]++;
    response.end();
    _$jscoverage['router.js'][46]++;
    return;
  }
  _$jscoverage['router.js'][49]++;
  var handler = m.handler;
  _$jscoverage['router.js'][50]++;
  var method = request.method;
  _$jscoverage['router.js'][51]++;
  var args = [request, response];
  _$jscoverage['router.js'][52]++;
  args.push.apply(args, m.params);
  _$jscoverage['router.js'][54]++;
  var date = new Date();
  _$jscoverage['router.js'][55]++;
  console.log(("[" + date.toString() + "] " + request.method + " " + pathname));
  _$jscoverage['router.js'][58]++;
  if ((handler.cors_enabled == true)) {
    _$jscoverage['router.js'][59]++;
    response.setHeader("Access-Control-Allow-Origin", "*");
    _$jscoverage['router.js'][60]++;
    response.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS");
  }
  _$jscoverage['router.js'][63]++;
  if (((request.method != "OPTIONS") && ((typeof handler[method]) != "function"))) {
    _$jscoverage['router.js'][64]++;
    response.writeHead(405);
    _$jscoverage['router.js'][65]++;
    response.end();
    _$jscoverage['router.js'][66]++;
    return;
  }
  _$jscoverage['router.js'][69]++;
  if ((request.method == "OPTIONS")) {
    _$jscoverage['router.js'][70]++;
    request.end();
  }
  else {
    _$jscoverage['router.js'][72]++;
    handler[method].apply(this, args);
  }
}
_$jscoverage['router.js'][75]++;
exports.route = route;
