/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['router.js']) {
  _$jscoverage['router.js'] = [];
  _$jscoverage['router.js'][3] = 0;
  _$jscoverage['router.js'][4] = 0;
  _$jscoverage['router.js'][5] = 0;
  _$jscoverage['router.js'][6] = 0;
  _$jscoverage['router.js'][7] = 0;
  _$jscoverage['router.js'][8] = 0;
  _$jscoverage['router.js'][10] = 0;
  _$jscoverage['router.js'][11] = 0;
  _$jscoverage['router.js'][13] = 0;
  _$jscoverage['router.js'][14] = 0;
  _$jscoverage['router.js'][15] = 0;
  _$jscoverage['router.js'][16] = 0;
  _$jscoverage['router.js'][18] = 0;
  _$jscoverage['router.js'][19] = 0;
  _$jscoverage['router.js'][25] = 0;
  _$jscoverage['router.js'][26] = 0;
  _$jscoverage['router.js'][33] = 0;
  _$jscoverage['router.js'][36] = 0;
  _$jscoverage['router.js'][37] = 0;
  _$jscoverage['router.js'][39] = 0;
  _$jscoverage['router.js'][40] = 0;
  _$jscoverage['router.js'][41] = 0;
  _$jscoverage['router.js'][42] = 0;
  _$jscoverage['router.js'][43] = 0;
  _$jscoverage['router.js'][44] = 0;
  _$jscoverage['router.js'][47] = 0;
  _$jscoverage['router.js'][48] = 0;
  _$jscoverage['router.js'][49] = 0;
  _$jscoverage['router.js'][50] = 0;
  _$jscoverage['router.js'][52] = 0;
  _$jscoverage['router.js'][53] = 0;
  _$jscoverage['router.js'][56] = 0;
  _$jscoverage['router.js'][57] = 0;
  _$jscoverage['router.js'][58] = 0;
  _$jscoverage['router.js'][61] = 0;
  _$jscoverage['router.js'][62] = 0;
  _$jscoverage['router.js'][63] = 0;
  _$jscoverage['router.js'][64] = 0;
  _$jscoverage['router.js'][67] = 0;
  _$jscoverage['router.js'][68] = 0;
  _$jscoverage['router.js'][70] = 0;
  _$jscoverage['router.js'][73] = 0;
}
_$jscoverage['router.js'].source = ["","// Returns a handler that matches the given path","function match(handlers, request_path) {","\tfor(var route_path in handlers) {","\t\tif(route_path.indexOf('*') != -1) {","\t\t\tvar regex_string = route_path.replace(\"**\", \"(([a-zA-Z._-]+/?)+)\").replace(/\\*/g, \"([a-zA-Z._-]+)\");","\t\t\tvar regex = new RegExp(regex_string, \"i\");","\t\t\tvar matches = request_path.match(regex);","","\t\t\tif(!matches)","\t\t\t\tcontinue;","","\t\t\tif(matches[0] == request_path) {","\t\t\t\tvar params = [];","\t\t\t\tif(matches.length &gt; 2)","\t\t\t\t\tparams = matches.slice(1, matches.length - 1);","\t\t\t\telse","\t\t\t\t\tparams = [matches[1]];","\t\t\t\treturn {","\t\t\t\t\thandler: handlers[route_path],","\t\t\t\t\tparams: params","\t\t\t\t};","\t\t\t}","\t\t} else {","\t\t\tif(route_path == request_path) {","\t\t\t\treturn {","\t\t\t\t\thandler: handlers[route_path],","\t\t\t\t\tparams: []","\t\t\t\t};","\t\t\t}","\t\t}","\t}","\treturn false;","}","","function route(handlers, pathname, request, response) {","\tvar m = match(handlers, pathname);","","\tif(!m) {","\t\tconsole.log(\"No request handler found for \" + pathname);","\t\tresponse.writeHead(404, {'Content-Type': 'text/html'});","\t\tresponse.write(\"404 Not Found\");","\t\tresponse.end();","\t\treturn;","\t}","","\tvar handler = m.handler;","\tvar method = request.method;","\tvar args = [request, response];","\targs.push.apply(args, m.params);","","\tvar date = new Date();","\tconsole.log(\"[\" + date.toString() + \"] \" + request.method + \" \" + pathname);","","\t// Enable CORS","\tif(handler[\"cors_enabled\"] == true) {","\t\tresponse.setHeader(\"Access-Control-Allow-Origin\", \"*\");","\t\tresponse.setHeader(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS\");","\t}","","\tif(request.method != \"OPTIONS\" &amp;&amp; typeof handler[method] != \"function\") {","\t\tresponse.writeHead(405);","\t\tresponse.end();","\t\treturn;","\t}","","\tif(request.method == \"OPTIONS\")","\t\trequest.end();","\telse","\t\thandler[method].apply(this, args);","}","","exports.route = route;"];
_$jscoverage['router.js'][3]++;
function match(handlers, request_path) {
  _$jscoverage['router.js'][4]++;
  for (var route_path in handlers) {
    _$jscoverage['router.js'][5]++;
    if ((route_path.indexOf("*") != -1)) {
      _$jscoverage['router.js'][6]++;
      var regex_string = route_path.replace("**", "(([a-zA-Z._-]+/?)+)").replace(/\*/g, "([a-zA-Z._-]+)");
      _$jscoverage['router.js'][7]++;
      var regex = new RegExp(regex_string, "i");
      _$jscoverage['router.js'][8]++;
      var matches = request_path.match(regex);
      _$jscoverage['router.js'][10]++;
      if ((! matches)) {
        _$jscoverage['router.js'][11]++;
        continue;
      }
      _$jscoverage['router.js'][13]++;
      if ((matches[0] == request_path)) {
        _$jscoverage['router.js'][14]++;
        var params = [];
        _$jscoverage['router.js'][15]++;
        if ((matches.length > 2)) {
          _$jscoverage['router.js'][16]++;
          params = matches.slice(1, (matches.length - 1));
        }
        else {
          _$jscoverage['router.js'][18]++;
          params = [matches[1]];
        }
        _$jscoverage['router.js'][19]++;
        return ({handler: handlers[route_path], params: params});
      }
    }
    else {
      _$jscoverage['router.js'][25]++;
      if ((route_path == request_path)) {
        _$jscoverage['router.js'][26]++;
        return ({handler: handlers[route_path], params: []});
      }
    }
}
  _$jscoverage['router.js'][33]++;
  return false;
}
_$jscoverage['router.js'][36]++;
function route(handlers, pathname, request, response) {
  _$jscoverage['router.js'][37]++;
  var m = match(handlers, pathname);
  _$jscoverage['router.js'][39]++;
  if ((! m)) {
    _$jscoverage['router.js'][40]++;
    console.log(("No request handler found for " + pathname));
    _$jscoverage['router.js'][41]++;
    response.writeHead(404, {"Content-Type": "text/html"});
    _$jscoverage['router.js'][42]++;
    response.write("404 Not Found");
    _$jscoverage['router.js'][43]++;
    response.end();
    _$jscoverage['router.js'][44]++;
    return;
  }
  _$jscoverage['router.js'][47]++;
  var handler = m.handler;
  _$jscoverage['router.js'][48]++;
  var method = request.method;
  _$jscoverage['router.js'][49]++;
  var args = [request, response];
  _$jscoverage['router.js'][50]++;
  args.push.apply(args, m.params);
  _$jscoverage['router.js'][52]++;
  var date = new Date();
  _$jscoverage['router.js'][53]++;
  console.log(("[" + date.toString() + "] " + request.method + " " + pathname));
  _$jscoverage['router.js'][56]++;
  if ((handler.cors_enabled == true)) {
    _$jscoverage['router.js'][57]++;
    response.setHeader("Access-Control-Allow-Origin", "*");
    _$jscoverage['router.js'][58]++;
    response.setHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS");
  }
  _$jscoverage['router.js'][61]++;
  if (((request.method != "OPTIONS") && ((typeof handler[method]) != "function"))) {
    _$jscoverage['router.js'][62]++;
    response.writeHead(405);
    _$jscoverage['router.js'][63]++;
    response.end();
    _$jscoverage['router.js'][64]++;
    return;
  }
  _$jscoverage['router.js'][67]++;
  if ((request.method == "OPTIONS")) {
    _$jscoverage['router.js'][68]++;
    request.end();
  }
  else {
    _$jscoverage['router.js'][70]++;
    handler[method].apply(this, args);
  }
}
_$jscoverage['router.js'][73]++;
exports.route = route;
