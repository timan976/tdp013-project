/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['model.js']) {
  _$jscoverage['model.js'] = [];
  _$jscoverage['model.js'][1] = 0;
  _$jscoverage['model.js'][3] = 0;
  _$jscoverage['model.js'][4] = 0;
  _$jscoverage['model.js'][5] = 0;
  _$jscoverage['model.js'][6] = 0;
  _$jscoverage['model.js'][11] = 0;
  _$jscoverage['model.js'][12] = 0;
  _$jscoverage['model.js'][13] = 0;
  _$jscoverage['model.js'][14] = 0;
  _$jscoverage['model.js'][19] = 0;
  _$jscoverage['model.js'][20] = 0;
  _$jscoverage['model.js'][21] = 0;
  _$jscoverage['model.js'][22] = 0;
  _$jscoverage['model.js'][27] = 0;
  _$jscoverage['model.js'][28] = 0;
  _$jscoverage['model.js'][29] = 0;
  _$jscoverage['model.js'][30] = 0;
  _$jscoverage['model.js'][35] = 0;
  _$jscoverage['model.js'][36] = 0;
  _$jscoverage['model.js'][37] = 0;
  _$jscoverage['model.js'][38] = 0;
  _$jscoverage['model.js'][39] = 0;
  _$jscoverage['model.js'][44] = 0;
  _$jscoverage['model.js'][45] = 0;
  _$jscoverage['model.js'][46] = 0;
  _$jscoverage['model.js'][47] = 0;
  _$jscoverage['model.js'][52] = 0;
  _$jscoverage['model.js'][53] = 0;
  _$jscoverage['model.js'][54] = 0;
  _$jscoverage['model.js'][57] = 0;
  _$jscoverage['model.js'][58] = 0;
  _$jscoverage['model.js'][61] = 0;
  _$jscoverage['model.js'][63] = 0;
  _$jscoverage['model.js'][64] = 0;
  _$jscoverage['model.js'][65] = 0;
  _$jscoverage['model.js'][67] = 0;
  _$jscoverage['model.js'][68] = 0;
  _$jscoverage['model.js'][69] = 0;
  _$jscoverage['model.js'][70] = 0;
  _$jscoverage['model.js'][72] = 0;
  _$jscoverage['model.js'][73] = 0;
  _$jscoverage['model.js'][80] = 0;
  _$jscoverage['model.js'][81] = 0;
  _$jscoverage['model.js'][82] = 0;
  _$jscoverage['model.js'][83] = 0;
  _$jscoverage['model.js'][84] = 0;
  _$jscoverage['model.js'][86] = 0;
  _$jscoverage['model.js'][87] = 0;
  _$jscoverage['model.js'][94] = 0;
  _$jscoverage['model.js'][95] = 0;
  _$jscoverage['model.js'][98] = 0;
  _$jscoverage['model.js'][99] = 0;
  _$jscoverage['model.js'][102] = 0;
  _$jscoverage['model.js'][103] = 0;
  _$jscoverage['model.js'][104] = 0;
  _$jscoverage['model.js'][105] = 0;
  _$jscoverage['model.js'][108] = 0;
  _$jscoverage['model.js'][109] = 0;
  _$jscoverage['model.js'][110] = 0;
  _$jscoverage['model.js'][111] = 0;
  _$jscoverage['model.js'][120] = 0;
  _$jscoverage['model.js'][121] = 0;
  _$jscoverage['model.js'][127] = 0;
  _$jscoverage['model.js'][128] = 0;
  _$jscoverage['model.js'][129] = 0;
  _$jscoverage['model.js'][130] = 0;
  _$jscoverage['model.js'][132] = 0;
  _$jscoverage['model.js'][133] = 0;
  _$jscoverage['model.js'][134] = 0;
  _$jscoverage['model.js'][135] = 0;
  _$jscoverage['model.js'][139] = 0;
  _$jscoverage['model.js'][140] = 0;
  _$jscoverage['model.js'][141] = 0;
  _$jscoverage['model.js'][142] = 0;
  _$jscoverage['model.js'][145] = 0;
  _$jscoverage['model.js'][146] = 0;
  _$jscoverage['model.js'][153] = 0;
  _$jscoverage['model.js'][154] = 0;
  _$jscoverage['model.js'][155] = 0;
  _$jscoverage['model.js'][156] = 0;
  _$jscoverage['model.js'][160] = 0;
  _$jscoverage['model.js'][161] = 0;
  _$jscoverage['model.js'][169] = 0;
  _$jscoverage['model.js'][170] = 0;
  _$jscoverage['model.js'][171] = 0;
  _$jscoverage['model.js'][172] = 0;
  _$jscoverage['model.js'][173] = 0;
  _$jscoverage['model.js'][174] = 0;
  _$jscoverage['model.js'][175] = 0;
  _$jscoverage['model.js'][176] = 0;
  _$jscoverage['model.js'][177] = 0;
  _$jscoverage['model.js'][178] = 0;
  _$jscoverage['model.js'][179] = 0;
  _$jscoverage['model.js'][180] = 0;
  _$jscoverage['model.js'][181] = 0;
}
_$jscoverage['model.js'].source = ["var mongo = require('mongodb');","","function register_user(db, user, callback) {","\tdb.collection(\"user\", function(error, collection) {","\t\tcollection.insert(user, function(error, record) {","\t\t\tcallback(error, record);","\t\t});","\t});","}","","function username_exists(db, username, callback) {","\tdb.collection(\"user\", function(error, collection) {","\t\tcollection.findOne({username: username}, function(e, doc) {","\t\t\tcallback(!!doc);","\t\t});","\t});","}","","function validate_login(db, user, callback) {","    db.collection(\"user\", function(error, collection) {","        collection.findOne({username: user.username}, function(error, dbUser) {","\t\t\tcallback(dbUser != null &amp;&amp; user.password == dbUser.password, dbUser);","        });","    });","}","","function login_user(db, user, callback) {","    db.collection(\"user\", function(error, collection) {","        collection.update({username: user.username}, {$set: {logged_in: true}}, function(update_error, doc) {","\t\t\tcallback(error);","\t\t});","    });","}","","function logout_user(db, user_id, callback) {","    db.collection(\"user\", function(error, collection) {","\t\tvar id = new mongo.BSONPure.ObjectID(user_id);","        collection.update({_id: id}, {$set: {logged_in: false}}, function(update_error, doc) {","\t\t\tcallback(error);","\t\t});","    });","}","","function find_user(db, criteria, callback) {","\tdb.collection(\"user\", function(error, collection) {","\t\tcollection.findOne(criteria, function(user_error, user_doc) {","\t\t\tcallback(!error, user_doc);","\t\t});","\t});","}","","function find_user_by_id(db, user_id, callback) {","\tvar id = new mongo.BSONPure.ObjectID(user_id);","\tfind_user(db, {_id: id}, callback);","}","","function find_user_by_username(db, username, callback) {","\tfind_user(db, {username: username}, callback);","}","","function search_users(db, query, callback) {","\t// TODO: This can probably be done in a better way.","\tvar q = query.replace(/'/g, \"\");","\tvar query_string = \"(this.first_name + ' ' + this.last_name).toLowerCase().indexOf('\" + q + \"') != -1\";","\tquery_string += \"|| this.username.toLowerCase().indexOf('\" + q + \"') != -1\";","","\tdb.collection(\"user\", function(error, collection) {","\t\tcollection.find({$where: query_string}, function(find_error, documents) {","\t\t\tif(find_error) {","\t\t\t\t\tcallback(find_error, []);","\t\t\t} else {","\t\t\t\tdocuments.toArray(function(err, res) {","\t\t\t\t\tcallback(undefined, res);","\t\t\t\t});","\t\t\t}","\t\t});","\t});","}","","function find_wallposts(db, criteria, callback) {","\tdb.collection(\"wallpost\", function(error, collection) {","\t\tcollection.find(criteria, function(find_error, documents) {","\t\t\tif(find_error) {","\t\t\t\t\tcallback(false, []);","\t\t\t} else {","\t\t\t\tdocuments.toArray(function(err, res) {","\t\t\t\t\tcallback(true, res);","\t\t\t\t});","\t\t\t}","\t\t});","\t});","}","","function find_wallposts_to_user(db, user, callback) {","\tfind_wallposts(db, {to_id: user._id}, callback);","}","","function add_wallpost(db, from_id, to_id, post, callback) {","\tdb.collection(\"wallpost\", function(error, collection) {","\t\t// Wallposts also contain the username of the sender","\t\t// so we need to fetch that before inserting the wallpost.","\t\tfind_user_by_id(db, from_id, function(success, user) {","\t\t\tif(!success) {","\t\t\t\tcallback(false, undefined);","\t\t\t\treturn;","\t\t\t}","","\t\t\tto_id = new mongo.BSONPure.ObjectID(to_id);","\t\t\tfrom_id = new mongo.BSONPure.ObjectID(from_id);","\t\t\tvar name = user.first_name + \" \" + user.last_name;","\t\t\tvar wallpost_record = {","\t\t\t\tfrom: name,","\t\t\t\tfrom_username: user.username,","\t\t\t\tfrom_id: from_id,","\t\t\t\tto_id: to_id,","\t\t\t\tpost: post,","\t\t\t\tdate: new Date()","\t\t\t};","","\t\t\tcollection.insert(wallpost_record, function(post_error, wallpost_doc) {","\t\t\t\tcallback(!post_error, wallpost_doc);","\t\t\t});","\t\t})","\t})","}","","function add_friend(db, user_id, friend_id, callback) {","\tuser_id = new mongo.BSONPure.ObjectID(user_id);","\tfriend_id = new mongo.BSONPure.ObjectID(friend_id);","\tdb.collection(\"user\", function(error, collection) {","\t\t// Make sure the user exists","\t\tcollection.findOne({_id: user_id}, function(user_error, user) {","\t\t\tif(user_error || !user) {","\t\t\t\tcallback(false);","\t\t\t\treturn;","\t\t\t}","","\t\t\t// Make sure the friend exists","\t\t\tcollection.findOne({_id: friend_id}, function(friend_error, friend_user) {","\t\t\t\tif(friend_error || !friend_user) {","\t\t\t\t\tcallback(false);","\t\t\t\t\treturn;","\t\t\t\t}","","\t\t\t\tvar friends = user.friends;","\t\t\t\tvar friend = {","\t\t\t\t\tuser_id: friend_user._id,","\t\t\t\t\tusername: friend_user.username,","\t\t\t\t\tname: friend_user.first_name + \" \" + friend_user.last_name","\t\t\t\t};","","\t\t\t\t// Make sure the two people aren't already friends","\t\t\t\tcollection.findOne({_id: user_id, friends: {$elemMatch: {user_id: friend_id}}}, function(find_error, match) {","\t\t\t\t\tif(match) {","\t\t\t\t\t\tcallback(false);","\t\t\t\t\t\treturn;","\t\t\t\t\t}","","\t\t\t\t\t// Finally add the friend to the users friends-list","\t\t\t\t\tcollection.update(user, {$addToSet: {friends: friend}}, function(update_error) {","\t\t\t\t\t\tcallback(!update_error);","\t\t\t\t\t});","\t\t\t\t})","\t\t\t});","\t\t});","\t});","}","","exports.register_user = register_user;","exports.validate_login = validate_login;","exports.username_exists = username_exists;","exports.login_user = login_user;","exports.logout_user = logout_user;","exports.find_user_by_id = find_user_by_id;","exports.find_user_by_username = find_user_by_username;","exports.find_user = find_user;","exports.search_users = search_users;","exports.find_wallposts_to_user = find_wallposts_to_user;","exports.find_wallposts = find_wallposts;","exports.add_wallpost = add_wallpost;","exports.add_friend = add_friend;"];
_$jscoverage['model.js'][1]++;
var mongo = require("mongodb");
_$jscoverage['model.js'][3]++;
function register_user(db, user, callback) {
  _$jscoverage['model.js'][4]++;
  db.collection("user", (function (error, collection) {
  _$jscoverage['model.js'][5]++;
  collection.insert(user, (function (error, record) {
  _$jscoverage['model.js'][6]++;
  callback(error, record);
}));
}));
}
_$jscoverage['model.js'][11]++;
function username_exists(db, username, callback) {
  _$jscoverage['model.js'][12]++;
  db.collection("user", (function (error, collection) {
  _$jscoverage['model.js'][13]++;
  collection.findOne({username: username}, (function (e, doc) {
  _$jscoverage['model.js'][14]++;
  callback((! (! doc)));
}));
}));
}
_$jscoverage['model.js'][19]++;
function validate_login(db, user, callback) {
  _$jscoverage['model.js'][20]++;
  db.collection("user", (function (error, collection) {
  _$jscoverage['model.js'][21]++;
  collection.findOne({username: user.username}, (function (error, dbUser) {
  _$jscoverage['model.js'][22]++;
  callback(((dbUser != null) && (user.password == dbUser.password)), dbUser);
}));
}));
}
_$jscoverage['model.js'][27]++;
function login_user(db, user, callback) {
  _$jscoverage['model.js'][28]++;
  db.collection("user", (function (error, collection) {
  _$jscoverage['model.js'][29]++;
  collection.update({username: user.username}, {$set: {logged_in: true}}, (function (update_error, doc) {
  _$jscoverage['model.js'][30]++;
  callback(error);
}));
}));
}
_$jscoverage['model.js'][35]++;
function logout_user(db, user_id, callback) {
  _$jscoverage['model.js'][36]++;
  db.collection("user", (function (error, collection) {
  _$jscoverage['model.js'][37]++;
  var id = new (mongo.BSONPure.ObjectID)(user_id);
  _$jscoverage['model.js'][38]++;
  collection.update({_id: id}, {$set: {logged_in: false}}, (function (update_error, doc) {
  _$jscoverage['model.js'][39]++;
  callback(error);
}));
}));
}
_$jscoverage['model.js'][44]++;
function find_user(db, criteria, callback) {
  _$jscoverage['model.js'][45]++;
  db.collection("user", (function (error, collection) {
  _$jscoverage['model.js'][46]++;
  collection.findOne(criteria, (function (user_error, user_doc) {
  _$jscoverage['model.js'][47]++;
  callback((! error), user_doc);
}));
}));
}
_$jscoverage['model.js'][52]++;
function find_user_by_id(db, user_id, callback) {
  _$jscoverage['model.js'][53]++;
  var id = new (mongo.BSONPure.ObjectID)(user_id);
  _$jscoverage['model.js'][54]++;
  find_user(db, {_id: id}, callback);
}
_$jscoverage['model.js'][57]++;
function find_user_by_username(db, username, callback) {
  _$jscoverage['model.js'][58]++;
  find_user(db, {username: username}, callback);
}
_$jscoverage['model.js'][61]++;
function search_users(db, query, callback) {
  _$jscoverage['model.js'][63]++;
  var q = query.replace(/'/g, "");
  _$jscoverage['model.js'][64]++;
  var query_string = ("(this.first_name + ' ' + this.last_name).toLowerCase().indexOf('" + q + "') != -1");
  _$jscoverage['model.js'][65]++;
  query_string += ("|| this.username.toLowerCase().indexOf('" + q + "') != -1");
  _$jscoverage['model.js'][67]++;
  db.collection("user", (function (error, collection) {
  _$jscoverage['model.js'][68]++;
  collection.find({$where: query_string}, (function (find_error, documents) {
  _$jscoverage['model.js'][69]++;
  if (find_error) {
    _$jscoverage['model.js'][70]++;
    callback(find_error, []);
  }
  else {
    _$jscoverage['model.js'][72]++;
    documents.toArray((function (err, res) {
  _$jscoverage['model.js'][73]++;
  callback(undefined, res);
}));
  }
}));
}));
}
_$jscoverage['model.js'][80]++;
function find_wallposts(db, criteria, callback) {
  _$jscoverage['model.js'][81]++;
  db.collection("wallpost", (function (error, collection) {
  _$jscoverage['model.js'][82]++;
  collection.find(criteria, (function (find_error, documents) {
  _$jscoverage['model.js'][83]++;
  if (find_error) {
    _$jscoverage['model.js'][84]++;
    callback(false, []);
  }
  else {
    _$jscoverage['model.js'][86]++;
    documents.toArray((function (err, res) {
  _$jscoverage['model.js'][87]++;
  callback(true, res);
}));
  }
}));
}));
}
_$jscoverage['model.js'][94]++;
function find_wallposts_to_user(db, user, callback) {
  _$jscoverage['model.js'][95]++;
  find_wallposts(db, {to_id: user._id}, callback);
}
_$jscoverage['model.js'][98]++;
function add_wallpost(db, from_id, to_id, post, callback) {
  _$jscoverage['model.js'][99]++;
  db.collection("wallpost", (function (error, collection) {
  _$jscoverage['model.js'][102]++;
  find_user_by_id(db, from_id, (function (success, user) {
  _$jscoverage['model.js'][103]++;
  if ((! success)) {
    _$jscoverage['model.js'][104]++;
    callback(false, undefined);
    _$jscoverage['model.js'][105]++;
    return;
  }
  _$jscoverage['model.js'][108]++;
  to_id = new (mongo.BSONPure.ObjectID)(to_id);
  _$jscoverage['model.js'][109]++;
  from_id = new (mongo.BSONPure.ObjectID)(from_id);
  _$jscoverage['model.js'][110]++;
  var name = (user.first_name + " " + user.last_name);
  _$jscoverage['model.js'][111]++;
  var wallpost_record = {from: name, from_username: user.username, from_id: from_id, to_id: to_id, post: post, date: new Date()};
  _$jscoverage['model.js'][120]++;
  collection.insert(wallpost_record, (function (post_error, wallpost_doc) {
  _$jscoverage['model.js'][121]++;
  callback((! post_error), wallpost_doc);
}));
}));
}));
}
_$jscoverage['model.js'][127]++;
function add_friend(db, user_id, friend_id, callback) {
  _$jscoverage['model.js'][128]++;
  user_id = new (mongo.BSONPure.ObjectID)(user_id);
  _$jscoverage['model.js'][129]++;
  friend_id = new (mongo.BSONPure.ObjectID)(friend_id);
  _$jscoverage['model.js'][130]++;
  db.collection("user", (function (error, collection) {
  _$jscoverage['model.js'][132]++;
  collection.findOne({_id: user_id}, (function (user_error, user) {
  _$jscoverage['model.js'][133]++;
  if ((user_error || (! user))) {
    _$jscoverage['model.js'][134]++;
    callback(false);
    _$jscoverage['model.js'][135]++;
    return;
  }
  _$jscoverage['model.js'][139]++;
  collection.findOne({_id: friend_id}, (function (friend_error, friend_user) {
  _$jscoverage['model.js'][140]++;
  if ((friend_error || (! friend_user))) {
    _$jscoverage['model.js'][141]++;
    callback(false);
    _$jscoverage['model.js'][142]++;
    return;
  }
  _$jscoverage['model.js'][145]++;
  var friends = user.friends;
  _$jscoverage['model.js'][146]++;
  var friend = {user_id: friend_user._id, username: friend_user.username, name: (friend_user.first_name + " " + friend_user.last_name)};
  _$jscoverage['model.js'][153]++;
  collection.findOne({_id: user_id, friends: {$elemMatch: {user_id: friend_id}}}, (function (find_error, match) {
  _$jscoverage['model.js'][154]++;
  if (match) {
    _$jscoverage['model.js'][155]++;
    callback(false);
    _$jscoverage['model.js'][156]++;
    return;
  }
  _$jscoverage['model.js'][160]++;
  collection.update(user, {$addToSet: {friends: friend}}, (function (update_error) {
  _$jscoverage['model.js'][161]++;
  callback((! update_error));
}));
}));
}));
}));
}));
}
_$jscoverage['model.js'][169]++;
exports.register_user = register_user;
_$jscoverage['model.js'][170]++;
exports.validate_login = validate_login;
_$jscoverage['model.js'][171]++;
exports.username_exists = username_exists;
_$jscoverage['model.js'][172]++;
exports.login_user = login_user;
_$jscoverage['model.js'][173]++;
exports.logout_user = logout_user;
_$jscoverage['model.js'][174]++;
exports.find_user_by_id = find_user_by_id;
_$jscoverage['model.js'][175]++;
exports.find_user_by_username = find_user_by_username;
_$jscoverage['model.js'][176]++;
exports.find_user = find_user;
_$jscoverage['model.js'][177]++;
exports.search_users = search_users;
_$jscoverage['model.js'][178]++;
exports.find_wallposts_to_user = find_wallposts_to_user;
_$jscoverage['model.js'][179]++;
exports.find_wallposts = find_wallposts;
_$jscoverage['model.js'][180]++;
exports.add_wallpost = add_wallpost;
_$jscoverage['model.js'][181]++;
exports.add_friend = add_friend;
